name: "GitHub Actions EC2 Runner"
description: "Create and terminate EC2 instances for GitHub Actions self-hosted runners"
branding:
  icon: "server"
  color: "blue"

inputs:
  mode:
    description: "Mode: start or stop"
    required: true
  github-token:
    description: "GitHub personal access token"
    required: true
  image-id:
    description: "EC2 AMI image ID"
    required: false
  instance-type:
    description: "EC2 instance type"
    required: false
    default: "t3.micro"
  subnet-id:
    description: "VPC subnet ID"
    required: false
  security-group:
    description: "Security group ID"
    required: false
  repo-owner:
    description: "GitHub repository owner"
    required: false
  repo-name:
    description: "GitHub repository name"
    required: false
  labels:
    description: "Runner labels (comma-separated)"
    required: false
    default: "self-hosted,linux,x64"
  pre-runner-script:
    description: "Pre-runner script to execute before runner setup"
    required: false
  instance-id:
    description: "EC2 instance ID (for stop mode)"
    required: false
  aws-region:
    description: "AWS region"
    required: false
    default: "us-east-1"

outputs:
  label:
    description: "Generated unique label for the runner"
    value: ${{ steps.execute-runner.outputs.label }}
  ec2-instance-id:
    description: "EC2 instance ID of the created runner"
    value: ${{ steps.execute-runner.outputs.ec2-instance-id }}
  runner-name:
    description: "Name of the GitHub Actions runner"
    value: ${{ steps.execute-runner.outputs.runner-name }}

runs:
  using: "composite"
  steps:
    - name: Setup GitHub Runner EC2 Manager
      shell: bash
      run: |
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        # Map architecture names to common release naming
        case $ARCH in
          x86_64)
            ARCH="amd64"
            ;;
          aarch64|arm64)
            ARCH="arm64"
            ;;
          i386|i686)
            ARCH="386"
            ;;
          *)
            echo "❌ Unsupported architecture: $ARCH"
            exit 1
            ;;
        esac

        # Map OS names to common release naming
        case $OS in
          linux)
            OS="linux"
            EXT=""
            ;;
          darwin)
            OS="darwin"
            EXT=""
            ;;
          mingw*|msys*|cygwin*)
            OS="windows"
            EXT=".exe"
            ;;
          *)
            echo "❌ Unsupported OS: $OS"
            exit 1
            ;;
        esac

        BINARY_NAME="gh-workflow-${OS}-${ARCH}${EXT}"
        TARGET_BINARY="gh-workflow${EXT}"

        # Check if binary already exists
        if [ -f "${{ github.action_path }}/$TARGET_BINARY" ]; then
          echo "✅ Binary already exists: $TARGET_BINARY"
        else
          echo "📥 Downloading gh-workflow binary for $OS-$ARCH..."
          
          # Get the latest release download URL
          # Note: Update this URL to match your actual GitHub repository
          REPO_URL="https://github.com/mseptiaan/gh-workflow"
          RELEASE_URL="${REPO_URL}/releases/latest/download/$BINARY_NAME"
          
          # Download the binary
          echo "🔗 Downloading from: $RELEASE_URL"
          
          if command -v curl &> /dev/null; then
            curl -L -o "${{ github.action_path }}/$BINARY_NAME" "$RELEASE_URL"
          elif command -v wget &> /dev/null; then
            wget -O "${{ github.action_path }}/$BINARY_NAME" "$RELEASE_URL"
          else
            echo "❌ Neither curl nor wget is available"
            exit 1
          fi
          
          # Check if download was successful
          if [ ! -f "${{ github.action_path }}/$BINARY_NAME" ]; then
            echo "❌ Failed to download binary"
            exit 1
          fi
          
          echo "✅ Successfully downloaded: $BINARY_NAME"
          
          # Make it executable
          chmod +x "${{ github.action_path }}/$BINARY_NAME"

          # Create a symlink or copy to the target binary name
          if [ "$EXT" = ".exe" ]; then
            cp "${{ github.action_path }}/$BINARY_NAME" "${{ github.action_path }}/$TARGET_BINARY"
          else
            ln -sf "$BINARY_NAME" "${{ github.action_path }}/$TARGET_BINARY"
          fi
          
          # Make target binary executable
          chmod +x "${{ github.action_path }}/$TARGET_BINARY"
        fi

        # Add to PATH
        echo "${{ github.action_path }}" >> $GITHUB_PATH

        echo "🎉 GitHub Runner EC2 Manager setup complete!"

    - name: Execute GitHub Runner Action
      id: execute-runner
      shell: bash
      run: |
        cd "${{ github.action_path }}"

        # Debug: Check if binary exists and is executable
        echo "🔍 Checking binary status..."
        ls -la gh-workflow* || echo "No gh-workflow binaries found"

        # Determine binary name
        if [ -f "gh-workflow" ]; then
          BINARY_PATH="./gh-workflow"
        elif [ -f "gh-workflow.exe" ]; then
          BINARY_PATH="./gh-workflow.exe"
        else
          echo "❌ No gh-workflow binary found"
          exit 1
        fi

        # Make sure binary is executable
        chmod +x "$BINARY_PATH"

        echo "✅ Using binary: $BINARY_PATH"

        if [ "${{ inputs.mode }}" = "start" ]; then
          # Generate unique label for this run
          UNIQUE_LABEL="${{ inputs.labels }},run-${{ github.run_number }}-${{ github.run_attempt }}"
          RUNNER_NAME="runner-${{ github.run_number }}-${{ github.run_attempt }}-$(date +%s)"
          
          # Set default values if not provided
          REPO_OWNER="${{ inputs.repo-owner }}"
          REPO_NAME="${{ inputs.repo-name }}"
          
          if [ -z "$REPO_OWNER" ]; then
            REPO_OWNER="${{ github.repository_owner }}"
          fi
          
          if [ -z "$REPO_NAME" ]; then
            REPO_NAME="${{ github.event.repository.name }}"
          fi
          
          echo "🚀 Starting EC2 runner with label: $UNIQUE_LABEL"
          
          # Debug: Show the command that will be executed
          echo "🔍 Executing command:"
          echo "$BINARY_PATH create \\"
          echo "  --github-token [REDACTED] \\"
          echo "  --image-id \"${{ inputs.image-id }}\" \\"
          echo "  --instance-type \"${{ inputs.instance-type }}\" \\"
          echo "  --subnet-id \"${{ inputs.subnet-id }}\" \\"
          echo "  --security-group \"${{ inputs.security-group }}\" \\"
          echo "  --repo-owner \"$REPO_OWNER\" \\"
          echo "  --repo-name \"$REPO_NAME\" \\"
          echo "  --labels \"$UNIQUE_LABEL\" \\"
          echo "  --pre-runner-script \"${{ inputs.pre-runner-script }}\" \\"
          echo "  --runner-name \"$RUNNER_NAME\" \\"
          echo "  --output-format \"github-actions\" \\"
          echo "  --aws-region \"${{ inputs.aws-region }}\""
          
          # Create EC2 instance and capture output
          set +e  # Don't exit on error so we can capture the output
          OUTPUT=$($BINARY_PATH create \
            --github-token "${{ inputs.github-token }}" \
            --image-id "${{ inputs.image-id }}" \
            --instance-type "${{ inputs.instance-type }}" \
            --subnet-id "${{ inputs.subnet-id }}" \
            --security-group "${{ inputs.security-group }}" \
            --repo-owner "$REPO_OWNER" \
            --repo-name "$REPO_NAME" \
            --labels "$UNIQUE_LABEL" \
            --pre-runner-script "${{ inputs.pre-runner-script }}" \
            --runner-name "$RUNNER_NAME" \
            --output-format "github-actions" \
            --aws-region "${{ inputs.aws-region }}" 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "📄 Command output:"
          echo "$OUTPUT"
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Command failed with exit code: $EXIT_CODE"
            exit $EXIT_CODE
          fi
          
          # Extract instance ID from output
          INSTANCE_ID=$(echo "$OUTPUT" | grep "Instance ID:" | cut -d' ' -f3)
          
          # Set outputs
          echo "label=$UNIQUE_LABEL" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "runner-name=$RUNNER_NAME" >> $GITHUB_OUTPUT
          
        elif [ "${{ inputs.mode }}" = "stop" ]; then
          echo "🛑 Stopping EC2 runner: ${{ inputs.instance-id }}"
          
          $BINARY_PATH terminate \
            --instance-id "${{ inputs.instance-id }}" \
            --output-format "github-actions" \
            --aws-region "${{ inputs.aws-region }}"
          
        else
          echo "❌ Invalid mode: ${{ inputs.mode }}. Must be 'start' or 'stop'"
          exit 1
        fi
